#lang racket/base

(require forge/lang/ast)
(require forge/sigs-structs)
(require (for-syntax racket/syntax syntax/srcloc)
         syntax/srcloc)

(provide forge-checker-hash)
(provide forge-ast-checker-hash)
(provide forge-inst-checker-hash)
(define forge-checker-hash (make-hash))
(define forge-ast-checker-hash (make-hash))
(define forge-inst-checker-hash (make-hash))


; The base Forge language (Relational Forge) has no custom errors at the moment. For documentation,
; see forge/bsl/lang/lang-specific-checks.rkt. 

;; (hash-set! forge-checker-hash node/fmla/pred-spacer check-node-fmla-pred-spacer)
;; (hash-set! forge-checker-hash node/expr/fun-spacer check-node-expr-fun-spacer)
;; (hash-set! forge-checker-hash node/formula/constant check-node-formula-constant)
;; (hash-set! forge-checker-hash node/formula/op check-node-formula-op)
;; (hash-set! forge-checker-hash node/formula/multiplicity check-node-formula-multiplicity)
;; (hash-set! forge-checker-hash node/formula/quantified check-node-formula-quantified)
;; (hash-set! forge-checker-hash node/formula/op/always check-node-formula-op-always)
;; (hash-set! forge-checker-hash node/formula/op/eventually check-node-formula-op-eventually)
;; (hash-set! forge-checker-hash node/formula/op/until check-node-formula-op-until)
;; (hash-set! forge-checker-hash node/formula/op/releases check-node-formula-op-releases)
;; (hash-set! forge-checker-hash node/formula/op/next_state check-node-formula-op-next_state)
;; (hash-set! forge-checker-hash node/formula/op/historically check-node-formula-op-historically)
;; (hash-set! forge-checker-hash node/formula/op/once check-node-formula-op-once)
;; (hash-set! forge-checker-hash node/formula/op/prev_state check-node-formula-op-prev_state)
;; (hash-set! forge-checker-hash node/formula/op/since check-node-formula-op-since)
;; (hash-set! forge-checker-hash node/formula/op/triggered check-node-formula-op-triggered)
;; (hash-set! forge-checker-hash node/formula/op/&& check-node-formula-op-&&)
;; (hash-set! forge-checker-hash node/formula/op/|| check-node-formula-op-||)
;; (hash-set! forge-checker-hash node/formula/op/=> check-node-formula-op-=>)
;; (hash-set! forge-checker-hash node/formula/op/in check-node-formula-op-in)
;; (hash-set! forge-checker-hash node/formula/op/= check-node-formula-op-=)
;; (hash-set! forge-checker-hash node/formula/op/! check-node-formula-op-!)
;; (hash-set! forge-checker-hash node/formula/op/int> check-node-formula-op-int>)
;; (hash-set! forge-checker-hash node/formula/op/int< check-node-formula-op-int<)
;; (hash-set! forge-checker-hash node/formula/op/int= check-node-formula-op-int=)
;; (hash-set! forge-checker-hash node/expr/relation check-node-expr-relation)
;; (hash-set! forge-checker-hash node/expr/atom check-node-expr-atom)
;; (hash-set! forge-checker-hash node/expr/ite check-node-expr-ite)
;; (hash-set! forge-checker-hash node/expr/constant check-node-expr-constant)
;; (hash-set! forge-checker-hash node/expr/op check-node-expr-op)
;; (hash-set! forge-checker-hash node/expr/quantifier-var check-node-expr-quantifier-var)
;; (hash-set! forge-checker-hash node/expr/comprehension check-node-expr-comprehension)
;; (hash-set! forge-checker-hash node/expr/op/prime check-node-expr-op-prime)
;; (hash-set! forge-checker-hash node/expr/op/+ check-node-expr-op-+)
;; (hash-set! forge-checker-hash node/expr/op/- check-node-expr-op--)
;; (hash-set! forge-checker-hash node/expr/op/& check-node-expr-op-&)
;; (hash-set! forge-checker-hash node/expr/op/-> check-node-expr-op-->)
;; (hash-set! forge-checker-hash node/expr/op/join check-node-expr-op-join)
;; (hash-set! forge-checker-hash node/expr/op/^ check-node-expr-op-^)
;; (hash-set! forge-checker-hash node/expr/op/* check-node-expr-op-*)
;; (hash-set! forge-checker-hash node/expr/op/~ check-node-expr-op-~)
;; (hash-set! forge-checker-hash node/expr/op/sing check-node-expr-op-sing)
